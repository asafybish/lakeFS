// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package io.treeverse.clients.committed

/** @param minKey
  *   First key of range, must be &gt;= key of range in SSTable.  If missing, == key of range in SSTable.
  */
@SerialVersionUID(0L)
final case class RangeData(
    minKey: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY,
    maxKey: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY,
    estimatedSize: _root_.scala.Long = 0L,
    count: _root_.scala.Long = 0L,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[RangeData] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = minKey
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(1, __value)
        }
      };
      
      {
        val __value = maxKey
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(2, __value)
        }
      };
      
      {
        val __value = estimatedSize
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(3, __value)
        }
      };
      
      {
        val __value = count
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(4, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = minKey
        if (!__v.isEmpty) {
          _output__.writeBytes(1, __v)
        }
      };
      {
        val __v = maxKey
        if (!__v.isEmpty) {
          _output__.writeBytes(2, __v)
        }
      };
      {
        val __v = estimatedSize
        if (__v != 0L) {
          _output__.writeUInt64(3, __v)
        }
      };
      {
        val __v = count
        if (__v != 0L) {
          _output__.writeInt64(4, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def withMinKey(__v: _root_.com.google.protobuf.ByteString): RangeData = copy(minKey = __v)
    def withMaxKey(__v: _root_.com.google.protobuf.ByteString): RangeData = copy(maxKey = __v)
    def withEstimatedSize(__v: _root_.scala.Long): RangeData = copy(estimatedSize = __v)
    def withCount(__v: _root_.scala.Long): RangeData = copy(count = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = minKey
          if (__t != _root_.com.google.protobuf.ByteString.EMPTY) __t else null
        }
        case 2 => {
          val __t = maxKey
          if (__t != _root_.com.google.protobuf.ByteString.EMPTY) __t else null
        }
        case 3 => {
          val __t = estimatedSize
          if (__t != 0L) __t else null
        }
        case 4 => {
          val __t = count
          if (__t != 0L) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PByteString(minKey)
        case 2 => _root_.scalapb.descriptors.PByteString(maxKey)
        case 3 => _root_.scalapb.descriptors.PLong(estimatedSize)
        case 4 => _root_.scalapb.descriptors.PLong(count)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = io.treeverse.clients.committed.RangeData
    // @@protoc_insertion_point(GeneratedMessage[committed.RangeData])
}

object RangeData extends scalapb.GeneratedMessageCompanion[io.treeverse.clients.committed.RangeData] with scalapb.HasBuilder[io.treeverse.clients.committed.RangeData] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.treeverse.clients.committed.RangeData] with scalapb.HasBuilder[io.treeverse.clients.committed.RangeData] = this
  def merge(`_message__`: io.treeverse.clients.committed.RangeData, `_input__`: _root_.com.google.protobuf.CodedInputStream): io.treeverse.clients.committed.RangeData = newBuilder(_message__).merge(_input__).result()
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.treeverse.clients.committed.RangeData] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      io.treeverse.clients.committed.RangeData(
        minKey = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.com.google.protobuf.ByteString]).getOrElse(_root_.com.google.protobuf.ByteString.EMPTY),
        maxKey = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.com.google.protobuf.ByteString]).getOrElse(_root_.com.google.protobuf.ByteString.EMPTY),
        estimatedSize = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        count = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Long]).getOrElse(0L)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = CommittedProto.javaDescriptor.getMessageTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = CommittedProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.treeverse.clients.committed.RangeData(
    minKey = _root_.com.google.protobuf.ByteString.EMPTY,
    maxKey = _root_.com.google.protobuf.ByteString.EMPTY,
    estimatedSize = 0L,
    count = 0L
  )
  final class Builder private (
    private var __minKey: _root_.com.google.protobuf.ByteString,
    private var __maxKey: _root_.com.google.protobuf.ByteString,
    private var __estimatedSize: _root_.scala.Long,
    private var __count: _root_.scala.Long,
    private var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder
  ) extends _root_.scalapb.MessageBuilder[io.treeverse.clients.committed.RangeData] {
    def merge(`_input__`: _root_.com.google.protobuf.CodedInputStream): this.type = {
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __minKey = _input__.readBytes()
          case 18 =>
            __maxKey = _input__.readBytes()
          case 24 =>
            __estimatedSize = _input__.readUInt64()
          case 32 =>
            __count = _input__.readInt64()
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      this
    }
    def result(): io.treeverse.clients.committed.RangeData = {
      io.treeverse.clients.committed.RangeData(
        minKey = __minKey,
        maxKey = __maxKey,
        estimatedSize = __estimatedSize,
        count = __count,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
  }
  object Builder extends _root_.scalapb.MessageBuilderCompanion[io.treeverse.clients.committed.RangeData, io.treeverse.clients.committed.RangeData.Builder] {
    def apply(): Builder = new Builder(
      __minKey = _root_.com.google.protobuf.ByteString.EMPTY,
      __maxKey = _root_.com.google.protobuf.ByteString.EMPTY,
      __estimatedSize = 0L,
      __count = 0L,
      `_unknownFields__` = null
    )
    def apply(`_message__`: io.treeverse.clients.committed.RangeData): Builder = new Builder(
        __minKey = _message__.minKey,
        __maxKey = _message__.maxKey,
        __estimatedSize = _message__.estimatedSize,
        __count = _message__.count,
        `_unknownFields__` = new _root_.scalapb.UnknownFieldSet.Builder(_message__.unknownFields)
    )
  }
  def newBuilder: Builder = io.treeverse.clients.committed.RangeData.Builder()
  def newBuilder(`_message__`: io.treeverse.clients.committed.RangeData): Builder = io.treeverse.clients.committed.RangeData.Builder(_message__)
  implicit class RangeDataLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.treeverse.clients.committed.RangeData]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.treeverse.clients.committed.RangeData](_l) {
    def minKey: _root_.scalapb.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.minKey)((c_, f_) => c_.copy(minKey = f_))
    def maxKey: _root_.scalapb.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.maxKey)((c_, f_) => c_.copy(maxKey = f_))
    def estimatedSize: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.estimatedSize)((c_, f_) => c_.copy(estimatedSize = f_))
    def count: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.count)((c_, f_) => c_.copy(count = f_))
  }
  final val MIN_KEY_FIELD_NUMBER = 1
  final val MAX_KEY_FIELD_NUMBER = 2
  final val ESTIMATED_SIZE_FIELD_NUMBER = 3
  final val COUNT_FIELD_NUMBER = 4
  def of(
    minKey: _root_.com.google.protobuf.ByteString,
    maxKey: _root_.com.google.protobuf.ByteString,
    estimatedSize: _root_.scala.Long,
    count: _root_.scala.Long
  ): _root_.io.treeverse.clients.committed.RangeData = _root_.io.treeverse.clients.committed.RangeData(
    minKey,
    maxKey,
    estimatedSize,
    count
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[committed.RangeData])
}
